#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="leantime"

check_service_initialized init 20-php-fpm

### Sanity Test
sanity_db
sanity_var SITE_URL "Site URL"
db_ready mariadb

### Logfile redirection
mkdir -p /www/logs/leantime
chown -R "${NGINX_USER}":"${NGINX_GROUP}" /www/logs/leantime
rm -rf "${NGINX_WEBROOT}"/resources/logs
mkdir -p ${NGINX_WEBROOT}/resources
ln -sf /www/logs/leantime "${NGINX_WEBROOT}"/resources/logs

### Check if New Install
if [ ! -f "${NGINX_WEBROOT}/server.php" ]; then
    print_warn "Potential New Installation / Standalone Installation Detected - Copying Leantime Sourcecode"
    silent cp -a /assets/install/* "${NGINX_WEBROOT}"

    ### If running with /www/html or NGINX_WEBROOT mapped, then create persistent storage
    ### Storage redirection
    if [ -d "/data" ]; then
        print_warn "Detected /data directory. Persistently saving settings and volatile information"
        case "$STORAGE_TYPE" in
            "FILES" | "files" | "FILESYSTEM" | "filesystem" | "LOCAL" | "local" )
                s3_enabled="false"
                rm -rf ${NGINX_WEBROOT}/public/userfiles
                ln -sf /data/userfiles "${NGINX_WEBROOT}"/public/userfiles
                mkdir -p /data/storage
                rm -rf ${NGINX_WEBROOT}/${STORAGE_FILE_PATH}
                ln -sf /data/storage ${NGINX_WEBROOT}/${STORAGE_FILE_PATH}
                ln -sf /data/config "${NGINX_WEBROOT}"/config/configuration.php
            ;;
            "S3" | "s3" | "MINIO" | "minio" )
                s3_enabled="true"
            ;;
            * )
                print_error "Unknown \$$STORAGE_TYPE variable. Exiting.."
                exit 1
            ;;
        esac
        ln -sf /data/config "${NGINX_WEBROOT}"/config/configuration.php
        touch /data/config
        chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/config/configuration.php
        ln -sf /data/.leantime-version "${NGINX_WEBROOT}"/.leantime-version
        chown -R "${NGINX_USER}":"${NGINX_GROUP}" /data
    else
        case "$STORAGE_TYPE" in
            "FILES" | "files" | "FILESYSTEM" | "filesystem" | "LOCAL" | "local" )
                s3_enabled="false"
                mkdir ${NGINX_WEBROOT}/${STORAGE_FILE_PATH}
                chown -R "${NGINX_USER}":"${NGINX_GROUP}" ${NGINX_WEBROOT}/${STORAGE_FILE_PATH}
            ;;
            "S3" | "s3" | "MINIO" | "minio" )
                s3_enabled="true"
            ;;
            * )
                print_error "Unknown \$$STORAGE_TYPE variable. Exiting.."
                exit 1
            ;;
        esac
    fi

    ### Auto Upgrade functionality
    if [ ! -f "${NGINX_WEBROOT}/.leantime-version" ]; then
        echo "${LEANTIME_VERSION} first installed on $(date)" >> "${NGINX_WEBROOT}"/.leantime-version
    fi
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
else
    if [ "$ENABLE_AUTO_UPDATE" = "TRUE" ]; then
        if [ "$LEANTIME_VERSION" != $(head -n 1 "${NGINX_WEBROOT}"/.leantime-version | awk '{print $1'}) ]; then
        print_warn "Detected in place Leantime version $(head -n 1 "${NGINX_WEBROOT}"/.leantime-version | awk "{print $1"}) - Upgrading to ${LEANTIME_VERSION}"
            cp -R /assets/install/* "${NGINX_WEBROOT}"
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
            cd "${NGINX_WEBROOT}"|| exit
            sed -i --follow-symlinks "1 i\
            ${LEANTIME_VERSION} upgraded on $(date)" /www/html/.leantime-version
        fi
    fi
fi

## Copy over any custom files overtop of source
if [ -d "/assets/custom" ]; then
    print_warn "Detected Custom Source - Copying over to application"
    cp -R /assets/custom/* "${NGINX_WEBROOT}"/
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
fi

## Execute Custom Scripts
if [ -d /assets/custom-scripts/ ] ; then
    print_warn "Found Custom Scripts to Execute"
    for f in $(find /assets/custom-scripts/ -name \*.sh -type f); do
        print_warn "Running Script ${f}"
        chmod +x "${f}"
        ${f}
    done
fi

### Dynamically Create Configuration
if [ "$SETUP_TYPE" = "AUTO" ]; then
    print_info "Auto Configuring based on Environment Variables"
    print_info "Generating Configuration"

    if var_true ${s3_enabled} ; then
            print_debug "Enabling S3 Functions"
            sanity_var S3_KEY "S3 Key"
            sanity_var S3_SECRET "S3 Secret"
            sanity_var S3_REGION "S3 Region"
            sanity_var S3_BUCKET "S3 Bucket"
    fi

    cat <<EOF > ${NGINX_WEBROOT}/config/configuration.php
<?php
namespace leantime\core;

class config
{
  /* General */
  public \$sitename = "${SITE_NAME}";
  public \$language = "${LANGUAGE}";
  public \$mainColor = "${DEFAULT_COLOR}";
  public \$logoPath = "${LOGO_PATH}${LOGO_FILE}";
  public \$appUrl = "${SITE_URL}";

  /* Database */
  public \$dbHost="${DB_HOST}";
  public \$dbUser="${DB_USER}";
  public \$dbPassword="${DB_PASS}";
  public \$dbDatabase="${DB_NAME}";

  /* Fileupload */
  public \$userFilePath= "${STORAGE_FILE_PATH}/";

  public \$useS3 = ${s3_enabled};
  public \$s3Key = "${S3_KEY}";
  public \$s3Secret = "${S3_SECRET}";
  public \$s3Bucket = "${S3_BUCKET}";
  public \$s3Region = "${S3_REGION}";
  public \$s3FolderName = "${S3_FOLDER_NAME}";

  /* Sessions */
  public \$sessionpassword = "$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)";
  public \$sessionExpiration = ${SESSION_EXPIRE};

  /* Email */
  public \$email = "${SMTP_FROM}";
  public \$useSMTP = ${SMTP_ENABLE};
  public \$smtpHosts = "${SMTP_HOST}";
  public \$smtpUsername ="${SMTP_USER}";
  public \$smtpPassword = "${SMTP_PASS}";
  public \$smtpAutoTLS = ${SMTP_TLS_AUTO};
  public \$smtpSecure ="${SMTP_PROTOCOL}";
  public \$smtpPort = "${SMTP_PORT}";

  function __construct(){
    /* General */
    \$this->sitename = \$this->configEnvironmentHelper("LEAN_SITENAME", \$this->sitename);
    \$this->language = \$this->configEnvironmentHelper("LEAN_LANGUAGE", \$this->language);
    \$this->mainColor = \$this->configEnvironmentHelper("LEAN_MAIN_COLOR", \$this->mainColor);
    \$this->logoPath = \$this->configEnvironmentHelper("LEAN_LOGO_PATH", \$this->logoPath);
    \$this->appUrl = \$this->configEnvironmentHelper("LEAN_APP_URL", \$this->appUrl);

    /* Database */
    \$this->dbHost = \$this->configEnvironmentHelper("LEAN_DB_HOST", \$this->dbHost);
    \$this->dbUser = \$this->configEnvironmentHelper("LEAN_DB_USER", \$this->dbUser);
    \$this->dbPassword = \$this->configEnvironmentHelper("LEAN_DB_PASSWORD", \$this->dbPassword);
    \$this->dbDatabase = \$this->configEnvironmentHelper("LEAN_DB_DATABASE", \$this->dbDatabase);

    /* Fileupload */
    \$this->userFilePath= \$this->configEnvironmentHelper("LEAN_USER_FILE_PATH", \$this->userFilePath);

    \$this->useS3 = \$this->configEnvironmentHelper("LEAN_USE_S3", \$this->useS3, "boolean");
    \$this->s3Key = \$this->configEnvironmentHelper("LEAN_S3_KEY", \$this->s3Key);
    \$this->s3Secret = \$this->configEnvironmentHelper("LEAN_S3_SECRET", \$this->s3Secret);
    \$this->s3Bucket = \$this->configEnvironmentHelper("LEAN_S3_BUCKET", \$this->s3Bucket);
    \$this->s3Region = \$this->configEnvironmentHelper("LEAN_S3_REGION", \$this->s3Region);
    \$this->s3FolderName = \$this->configEnvironmentHelper("LEAN_S3_FOLDER_NAME", \$this->s3FolderName);

    /* Sessions */
    \$this->sessionpassword = \$this->configEnvironmentHelper("LEAN_SESSION_PASSWORD", \$this->sessionpassword);
    \$this->sessionExpiration = \$this->configEnvironmentHelper("LEAN_SESSION_EXPIRATION", \$this->sessionExpiration, "number");

    /* Email */
    \$this->email = \$this->configEnvironmentHelper("LEAN_EMAIL_RETURN", \$this->email);
    \$this->useSMTP = \$this->configEnvironmentHelper("LEAN_EMAIL_USE_SMTP", \$this->useSMTP, "boolean");
    \$this->smtpHosts = \$this->configEnvironmentHelper("LEAN_EMAIL_SMTP_HOSTS", \$this->smtpHosts);
    \$this->smtpUsername = \$this->configEnvironmentHelper("LEAN_EMAIL_SMTP_USERNAME", \$this->smtpUsername);
    \$this->smtpPassword = \$this->configEnvironmentHelper("LEAN_EMAIL_SMTP_PASSWORD", \$this->smtpPassword);
    \$this->smtpAutoTLS = \$this->configEnvironmentHelper("LEAN_EMAIL_SMTP_AUTO_TLS", \$this->smtpAutoTLS, "boolean");
    \$this->smtpSecure = \$this->configEnvironmentHelper("LEAN_EMAIL_SMTP_SECURE", \$this->smtpSecure);
    \$this->smtpPort = \$this->configEnvironmentHelper("LEAN_EMAIL_SMTP_PORT", \$this->smtpPort);

  }

  private function configEnvironmentHelper(\$envVar, \$default, \$dataType = "string") {
    \$found = getenv(\$envVar);
    if(!\$found || \$found == ""){
      return \$default;
    }

    // we need to check to see if we need to conver the found data
    if(\$dataType == "string"){
      return \$found;
    } else if(\$dataType == "boolean"){
      // if the string is true, then it is true, simple enough
      return \$found == "true" ? true : false;
    } else if(\$dataType == "number"){
      return intval(\$found);
    }
    return \$found;

  }
}
EOF

    if var_false "${SMTP_AUTH}" ; then
        sed -i "s|>mailAgent->SMTPAuth = true;|>mailAgent->SMTPAuth = false;|g" ${NGINX_WEBROOT}/src/core/class.mailer.php
    fi

else
    print_notice "Not auto generating configuration"
    if [ ! -f "${NGINX_WEBROOT}/config/configuration.php" ] ; then
        print_debug "Creating Sample Configuration"
        cp -R ${NGINX_WEBROOT}/config/configuration.sample.php ${NGINX_WEBROOT}/config/configuration.php
    fi
fi

liftoff
