#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="leantime"

s3_enabled="false"

check_service_initialized init 20-php-fpm

### Sanity Test
sanity_db
sanity_var SITE_URL "Site URL"
db_ready mariadb

### Logfile redirection
mkdir -p /www/logs/leantime
chown -R "${NGINX_USER}":"${NGINX_GROUP}" /www/logs/leantime
rm -rf "${NGINX_WEBROOT}"/resources/logs
mkdir -p "${NGINX_WEBROOT}"/resources
ln -sf /www/logs/leantime "${NGINX_WEBROOT}"/resources/logs
create_logrotate leantime /www/logs/leantime/error.log "${NGINX_USER}" "${NGINX_GROUP}"

### Check if New Install
if [ ! -f "${NGINX_WEBROOT}"/public/index.php ]; then
    print_warn "Potential New Installation / Standalone Installation Detected - Copying Leantime Sourcecode"
    silent cp -a /assets/install/* "${NGINX_WEBROOT}"

    ### If running with /www/html or NGINX_WEBROOT mapped, then create persistent storage
    ### Storage redirection
    if [ -d "/data" ]; then
        print_warn "Detected /data directory. Persistently saving settings and volatile information"
        case "${STORAGE_TYPE,,}" in
            files* | local )
                rm -rf "${NGINX_WEBROOT}"/public/userfiles
                mkdir -p "${NGINX_WEBROOT}"/public/
                mkdir -p /data/storage
                mkdir -p /data/public
                ln -sf /data/public "${NGINX_WEBROOT}"/public/userfiles
                rm -rf "${NGINX_WEBROOT}"/"${STORAGE_FILE_PATH}"
                ln -sf /data/storage "${NGINX_WEBROOT}"/"${STORAGE_FILE_PATH}"
                ln -sf /data/config "${NGINX_WEBROOT}"/config/configuration.php
                mkdir -p "${BACKUP_FILE_PATH}"
                rm -rf "${NGINX_WEBROOT}"/backupdb
                ln -sf "${BACKUP_FILE_PATH}" "${NGINX_WEBROOT}"/"${BACKUP_FILE_PATH}"
                chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${BACKUP_FILE_PATH}"
            ;;
            "s3" | "minio" )
                s3_enabled="true"
            ;;
            * )
                print_error "Unknown \$$STORAGE_TYPE variable. Exiting.."
                exit 1
            ;;
        esac
        mkdir -p "${NGINX_WEBROOT}"/config/
        ln -sf /data/config "${NGINX_WEBROOT}"/config/configuration.php
        touch /data/config
        chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/config/configuration.php
        ln -sf /data/.leantime-version "${NGINX_WEBROOT}"/.leantime-version
        chown -R "${NGINX_USER}":"${NGINX_GROUP}" /data
    else
        case "${STORAGE_TYPE,,}" in
            files* | local )
                s3_enabled="false"
                mkdir "${NGINX_WEBROOT}"/"${STORAGE_FILE_PATH}"
                chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/"${STORAGE_FILE_PATH}"
                mkdir "${NGINX_WEBROOT}"/"${BACKUP_FILE_PATH}"
                chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/"${BACKUP_FILE_PATH}"
            ;;
            "s3" | "minio" )
                s3_enabled="true"
            ;;
            * )
                print_error "Unknown \$$STORAGE_TYPE variable. Exiting.."
                exit 1
            ;;
        esac
    fi

    mkdir -p "${BACKUP_FILE_PATH}"
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${BACKUP_FILE_PATH}"

    ### Auto Upgrade functionality
    if [ ! -f "${NGINX_WEBROOT}"/.leantime-version ]; then
        echo "${LEANTIME_VERSION} first installed on $(date)" >> "${NGINX_WEBROOT}"/.leantime-version
    fi
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
else
    if [ "${ENABLE_AUTO_UPDATE,,}" = "true" ]; then
        if [ "${LEANTIME_VERSION}" != "$(head -n 1 "${NGINX_WEBROOT}"/.leantime-version | awk '{print $1}')" ]; then
        print_warn "Detected in place Leantime version $(head -n 1 "${NGINX_WEBROOT}"/.leantime-version | awk '{print $1}') - Upgrading to ${LEANTIME_VERSION}"
            cp -R /assets/install/* "${NGINX_WEBROOT}"
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
            cd "${NGINX_WEBROOT}"|| exit
            sed -i --follow-symlinks "1 i\
            ${LEANTIME_VERSION} upgraded on $(date)" /www/html/.leantime-version
        fi
    fi
fi

custom_files "${CONTAINER_CUSTOM_PATH}" "${NGINX_WEBROOT}" "${NGINX_USER}" "${NGINX_GROUP}"
custom_scripts

### Dynamically Create Configuration
if [ "${SETUP_TYPE,,}" = "auto" ]; then
    print_info "Auto Configuring based on Environment Variables"
    print_info "Generating Configuration"

    truefalse_onezero APP_DEBUG
    if var_true "${s3_enabled}" ; then
            print_debug "Enabling S3 Functions"
            sanity_var S3_KEY "S3 Key"
            sanity_var S3_SECRET "S3 Secret"
            sanity_var S3_REGION "S3 Region"
            sanity_var S3_BUCKET "S3 Bucket"
    fi

    cat <<EOF > "${NGINX_WEBROOT}"/config/configuration.php
<?php
namespace leantime\core;

class config
{
    /* General */
    public \$sitename = "${SITE_NAME}";
    public \$language = "${LANGUAGE}";
    public \$logoPath = "${LOGO_PATH}${LOGO_FILE}";
    public \$appUrl = "${SITE_URL}";
    public \$defaultTimezone = "${TIMEZONE}";
    public \$primarycolor = '${THEME_COLOR_PRIMARY}';
    public \$secondarycolor = '${THEME_COLOR_SECONDARY}';
    public \$defaultTimezone = '${TIMEZONE}';
    public \$enableMenuType = false;
    public \$keepTheme = true;
    public \$debug = ${APP_DEBUG};

    /* Database */
    public \$dbHost="${DB_HOST}";
    public \$dbUser="${DB_USER}";
    public \$dbPassword="${DB_PASS}";
    public \$dbDatabase="${DB_NAME}";
    public \$dbPort = '${DB_PORT}';

    /* Fileupload */
    public \$userFilePath= "${STORAGE_FILE_PATH}/";
    public \$dbBackupPath = "${BACKUP_FILE_PATH}/";

    public \$useS3 = ${s3_enabled,,};
    public \$s3Key = "${S3_KEY}";
    public \$s3Secret = "${S3_SECRET}";
    public \$s3Bucket = "${S3_BUCKET}";
    public \$s3UsePathStyleEndpoint = ${S3_ENDPOINT_PATHSTYLE,,};
    public \$s3Region = "${S3_REGION}";
    public \$s3FolderName = "${S3_FOLDER_NAME}";
    public \$s3EndPoint = "${S3_ENDPOINT}";

    /* Sessions */
    public \$sessionpassword = "$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)";
    public \$sessionExpiration = ${SESSION_EXPIRE};

    /* Email */
    public \$email = "${SMTP_FROM}";
    public \$useSMTP = ${SMTP_ENABLE,,};
    public \$smtpHosts = "${SMTP_HOST}";
    public \$smtpAuth = ${SMTP_AUTH,,};
    public \$smtpUsername ="${SMTP_USER}";
    public \$smtpPassword = "${SMTP_PASS}";
    public \$smtpAutoTLS = ${SMTP_TLS_AUTO};
    public \$smtpSecure ="${SMTP_PROTOCOL}";
    public \$smtpSSLNoverify = ${SMTP_TLS_NO_VERIFY,,};
    public \$smtpPort = "${SMTP_PORT}";

    /*ldap default settings (can be changed in company settings */
    /*ldap default settings*/
    public \$useLdap = ${ENABLE_LDAP,,};
    public \$ldapType = '${LDAP_TYPE}';
    public \$ldapHost = '${LDAP_HOST}';
    public \$ldapPort = ${LDAP_PORT};
    public \$baseDn = '${LDAP_BASE_DN}';
    public \$ldapDn = '${LDAP_DN}';
    public \$ldapUserDomain = '${LDAP_USER_DOMAIN}';
    public \$bindUser = '${LDAP_BIND_DN}';
    public \$bindPassword = '${LDAP_BIND_PASS}';

    //Default ldap keys in your directory.
    public \$ldapKeys = '{
        "username":"${LDAP_ATTRIBUTE_USER}",
        "groups":"${LDAP_ATTRIBUTE_GROUPS}",
        "email":"${LDAP_ATTRIBUTE_MAIL}",
        "firstname":"${LDAP_ATTRIBUTE_FIRST_NAME}",
        "lastname":"${LDAP_ATTRIBUTE_LAST_NAME}",
        "phonenumber":"${LDAP_ATTRIBUTE_PHONE}"
        }';

    //Default role assignments upon first login. (Optional) Can be updated in user settings for each user
    public \$ldapLtGroupAssignments = '{
          "10": {
            "ltRole":"client",
            "ldapRole":"${LDAP_GROUP_ROLE_CLIENT}"
          },
          "20": {
            "ltRole":"developer",
            "ldapRole":"${LDAP_GROUP_ROLE_DEVELOPER}"
          },
          "30": {
            "ltRole":"clientManager",
            "ldapRole":"${LDAP_GROUP_ROLE_CLIENT_MANAGER}"
          },
          "40": {
            "ltRole":"manager",
            "ldapRole":"${LDAP_GROUP_ROLE_MANAGER}"
          },
          "50": {
            "ltRole":"admin",
            "ldapRole":"${LDAP_GROUP_ROLE_ADMIN}"
          }
        }';

    public \$ldapDefaultRoleKey = ${LDAP_DEFAULT_USER_KEY};
}
EOF

else
    print_notice "Not auto generating configuration"
    if [ ! -f "${NGINX_WEBROOT}"/config/configuration.php ] ; then
        print_debug "Creating Sample Configuration"
        cp -R "${NGINX_WEBROOT}"/config/configuration.sample.php "${NGINX_WEBROOT}"/config/configuration.php
    fi
fi

liftoff
